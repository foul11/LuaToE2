@name CLua_env

ALWAYS_TRUE = 1
if(0){
    function table table:cluaNewVar(Type){

    }
}

if(first()){
    function table table:clua_print(Args:table){
        if(!(This["_class",number] == 1)){
            error("clua_print" + " " + "not run e2func ThisClass not clua_instance: " + " " + "_CLUA_TYPE_INSTANCE" + "[got " + This["_class",number] + "]" + ":" + 25)
        }
        local Print = ""
        
        foreach(K:number, Variable:table = Args){
            local Type = Variable["Type",number]
            
            switch(Type){
                case 1,
                    Print = Print + format("userdata %p", Variable["Value",table]) + "\t"
                    break
                case 2,
                    Print = Print + format("function %p", Variable["Value",table]) + "\t"
                    break
                case 3,
                    Print = Print + (Variable["Value",number] ? "true" : "false") + "\t"
                    break
                case 4,
                    Print = Print + Variable["Value",string] + "\t"
                    break
                case 5,
                    Print = Print + Variable["Value",number] + "\t"
                    break
                case 6,
                    Print = Print + format("thread %p", Variable["Value",table]) + "\t"
                    break
                case 7,
                    Print = Print + format("table %p", Variable["Value",table]) + "\t"
                    break
                case 8,
                    Print = Print + "nil" + "\t"
                    break
                default,
                    error("clua_print var type not found: " + Type)
            }
        }
        print(Print)
        return table()
    }
    
    function table table:clua_printTable(Args:table){
        if(!(This["_class",number] == 1)){
            error("clua_printTable" + " " + "not run e2func ThisClass not clua_instance: " + " " + "_CLUA_TYPE_INSTANCE" + "[got " + This["_class",number] + "]" + ":" + 75)
        }
        print("printTable:")
        printTable(Args[1,table])
        return table()
    }
    
    function table table:clua_table_insert(Args:table){
        if(!(This["_class",number] == 1)){
            error("clua_table_insert" + " " + "not run e2func ThisClass not clua_instance: " + " " + "_CLUA_TYPE_INSTANCE" + "[got " + This["_class",number] + "]" + ":" + 84)
        }
        local Tbl = Args[1,table]
        local Idx = Args[2,table]
        local Val = Args[3,table]
        local RIdx = 0
        
        if((Tbl["Type",number] ?: 8) != 7){
            error("bad argument #1 to 'insert' (table expected, got " + (Tbl["Type",number] ?: 8) + ")" + ":" + 91)
        }
        
        if((Val["Type",number] ?: 8) != 8){
            if((Idx["Type",number] ?: 8) != 5){
                error("bad argument #2 to 'insert' (number expected, got " + (Idx["Type",number] ?: 8) + ")" + ":" + 94)
            }
            RIdx = Idx["Value",number]
            Tbl:insertTable(RIdx, Val)
        }else{
            Tbl:pushTable(Idx)
            RIdx = Tbl:ncount()
        }
        local Ret = This:cluaNewVar(5)
        Ret["Value",number] = RIdx
        return table(Ret)
    }
    
    function table table:clua_inc(Args:table){
        if(!(This["_class",number] == 1)){
            error("clua_inc" + " " + "not run e2func ThisClass not clua_instance: " + " " + "_CLUA_TYPE_INSTANCE" + "[got " + This["_class",number] + "]" + ":" + 110)
        }
        local Val = Args[1,table]
        
        if((Val["Type",number] ?: 8) != 5){
            error("bad argument #1 to 'inc' (number expected, got " + (Val["Type",number] ?: 8) + ")" + ":" + 113)
        }
        Val["Value",number] = Val["Value",number] + 1
        print("clua_inc: " + Val["Value",number])
        return table(Val)
    }
}
