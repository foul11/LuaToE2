@name CLua_env

if(0){ function table table:cluaNewVar(Type){} }

if(first()){
	function table table:clua_print(Args:table){
		_debug(_assertClass(This, "not run e2func ThisClass not clua_instance: ", _CLUA_TYPE_INSTANCE))
		
		local Print = ""
		
		foreach(K:number, Variable:table = Args){
			local Type = Variable["Type",number]
			
			switch(Type){
				case _LUA_TYPE_USERDATA,
					Print = Print + format("userdata %p", Variable["Value",table]) + "\t"
					break
					
				case _LUA_TYPE_FUNCTION,
					Print = Print + format("function %p", Variable["Value",table]) + "\t"
					break
					
				case _LUA_TYPE_BOOLEAN,
					Print = Print + (Variable["Value",number] ? "true" : "false") + "\t"
					break
					
				case _LUA_TYPE_STRING,
					Print = Print + Variable["Value",string] + "\t"
					break
					
				case _LUA_TYPE_NUMBER,
					Print = Print + Variable["Value",number] + "\t"
					break
					
				case _LUA_TYPE_THREAD,
					Print = Print + format("thread %p", Variable["Value",table]) + "\t"
					break
					
				case _LUA_TYPE_TABLE,
					Print = Print + format("table %p", Variable["Value",table]) + "\t"
					break
					
				case _LUA_TYPE_NIL,
					Print = Print + "nil" + "\t"
					break
				
				default, error("clua_print var type not found: " + Type)
			}
		}
		
		print(Print)
		
		return table()
	}
	
	function table table:clua_printTable(Args:table){
		_debug(_assertClass(This, "not run e2func ThisClass not clua_instance: ", _CLUA_TYPE_INSTANCE))
		
		print("printTable:")
		printTable(Args[1,table])
		
		return table(This:cluaNewVar(_LUA_TYPE_TABLE))
	}
}