@name CLua

#@typedef table clua_instance
#@typedef table clua_variable
#@typedef table clua_func
#@typedef table clua_func_ext

#@typedef table clua_context
#@typedef table clua_contexts
#@typedef table clua_contexts_in_scope

#@typedef table clua_scope
#@typedef table clua_scopes
#@typedef table clua_scopes_in_scope

#[
	@define _assert(CONDITION, MSG) \
		if (!CONDITION) { \
			error(__FUNC__ + " " + MSG + ":" + __LINE__) \
		}
		
	@define _assertExpr(CONDITION, EXPR) \
		if (!CONDITION) { \
			EXPR \
		}
		
		
	@define _assertClass(TABLE, MSG, TYPE) \
		_assert(TABLE["_class",number] == TYPE, MSG + " " + __ENUM__("_CLUA_TYPE_", TYPE) + "[got " + TABLE["_class",number] + "]")
		
	@define _assertSubClass(TABLE, MSG, TYPE) \
		_assert(TABLE["_classsub",number] == TYPE, MSG + " " + __ENUM__("_CLUA_TYPE_", TYPE) + "[got " + TABLE["_classsub",number] + "]")
		
	@define _assertType(TABLE, MSG, TYPE) \
		_assert(TABLE["_Type",number] == TYPE, MSG)
		
		
	@define _assertNClass(TABLE, MSG, TYPE) \
		_assert(TABLE["_class",number] != TYPE, MSG + " " + __ENUM__("_CLUA_TYPE_", TYPE) + "[got " + TABLE["_class",number] + "]")
		
	@define _assertNSubClass(TABLE, MSG, TYPE) \
		_assert(TABLE["_classsub",number] != TYPE, MSG + " " + __ENUM__("_CLUA_TYPE_", TYPE) + "[got " + TABLE["_classsub",number] + "]")
		
	@define _assertNType(TABLE, MSG, TYPE) \
		_assert(TABLE["_Type",number] != TYPE, MSG)
		
		
	@define _debug(EXPR) #[@debug]# EXPR
	
	@define _notImp \
		error("Not implement (check " + __FUNC__ + ":" + __LINE__ + ")")
		
	
	@enum _LUA_TYPE_ {
		USERDATA,
		FUNCTION,
		BOOLEAN ,
		STRING  ,
		NUMBER  ,
		THREAD  ,
		TABLE   ,
		NIL     ,
	}
	
	@enum _CLUA_TYPE_ {
		INSTANCE,
		VARIABLE,
		FUNC    ,
		FUNC_EXT,
		
		CONTEXT ,
		CONTEXTS,
		CONTEXTS_IN_SCOPE,
		
		SCOPE ,
		SCOPES,
		SCOPES_IN_SCOPE,
	}
	
	@enum _CLUA_INST_ {
		EXT_CALL   , #statments
		CALL       ,
		DECLARATION,
		ASSIGNMENT ,
		CONTINUE   , #GLUA
		BREAK      ,
		RETURN     ,
		LABEL      ,
		GOTO       ,
		BLOCK      ,
		IF         ,
		FOR        ,
		WHILE      ,
		REPEAT     ,
		
		IDENTIFIER , #expression
		VARARG     ,
		LITERAL    ,
		TABLE      ,
		LOOKUP     ,
		UNARY      ,
		BINARY     ,
		FUNCTION   ,
		
		CTX        , #for internal
	}
	
	@enum _CLUA_BINARY_ {
		ADD  = 1 , #+
		SUB  = 2 , #-
		MUL  = 3 , #*
		DIV  = 4 , #/
			     , #^  - skip
			     , #// - skip
		MOD  = 7 , #%
			     , #&  - skip
			     , #~  - skip
			     , #|  - skip
			     , #>> - skip
			     , #<< - skip
		CNC  = 13, #..
		LS   = 14, #<
		GR   = 15, #>
		EQLS = 16, #<=
		EQGR = 17, #>=
		EQ   = 18, #==
		NEQ  = 19, #~=
		AND  = 20, #and, && - glua
		OR   = 21, #or,  || - glua
	}
	
	@enum _CLUA_UNARY_ {
		NEG  = 1, #-
		NOT  = 2, #not, ! - glua
		SHP  = 3, ##
		        , #~ - skip
	}
	
	
	
	@define _assertVar(VAR) \
		_debug(_assertClass(VAR, "isnt Variable", _CLUA_TYPE_VARIABLE))
		
	@define _IsVar(VAR) \
		VAR["_class",number] == _CLUA_TYPE_VARIABLE
		
	@define _VarType(VAR) \
		VAR["Type",number] ?: _LUA_TYPE_NIL
		
	@define _VarSetType(VAR, TYPE) \
		VAR["Type",number] = TYPE
		
	@define _VarPointer(VAR, TYPE) \
		(TYPE == _LUA_TYPE_BOOLEAN) ? (VAR["Value",number]+"") : \
			(TYPE == _LUA_TYPE_STRING ? VAR["Value",string] : format("%p", VAR["Value",table]))
		
	@define _TblSet(TABLE, KEY, VALUE) \
		local KeyT = _VarType(KEY) \
		if(KeyT == _LUA_TYPE_NUMBER){ \
			TABLE[ _VarNum(KEY),table] = VALUE \
		}else{ \
			local KeyP = _VarPointer(KEY, KeyT) \
			TABLE[KeyT + _TblDmtr + KeyP,table] = VALUE \
		}
		
	@define _TblGet(RET, TABLE, KEY) \
		local KeyT = _VarType(KEY) \
		if(KeyT == _LUA_TYPE_NUMBER){ \
			RET = TABLE[ _VarNum(KEY),table] \
		}else{ \
			local KeyP = _VarPointer(KEY, KeyT) \
			RET = TABLE[KeyT + _TblDmtr + KeyP,table] \
		}
		
		
	@define _VarSetStr(VAR, VAL) \
		VAR["Value",string] = VAL
		
	@define _VarSetTbl(VAR, VAL) \
		VAR["Value",table] = VAL
		
	@define _VarSetNum(VAR, VAL) \
		VAR["Value",number] = VAL
		
	@define _VarSetBool(VAR, VAL) \
		VAR["Value",number] = VAL
		
		
	@define _VarStr(VAR) \
		VAR["Value",string]
		
	@define _VarTbl(VAR) \
		VAR["Value",table]
		
	@define _VarNum(VAR) \
		VAR["Value",number]
		
	@define _VarBool(VAR) \
		VAR["Value",number]
		
	
	@define _TblDmtr \
		":TYPE-VALUE:"
	
]#

if(first()){
	function table table:cluaNewVar(Type){
		_debug(_assertClass(This, "can't use to", _CLUA_TYPE_INSTANCE))
		
		switch(Type){
			case _LUA_TYPE_USERDATA,
			case _LUA_TYPE_FUNCTION,
			case _LUA_TYPE_BOOLEAN ,
			case _LUA_TYPE_STRING  ,
			case _LUA_TYPE_NUMBER  ,
			case _LUA_TYPE_THREAD  ,
			case _LUA_TYPE_TABLE   ,
			case _LUA_TYPE_NIL     ,
				return table(
					#"Value" = ...,
					"Type" = Type,
					"_class" = _CLUA_TYPE_VARIABLE
				)
			
			default, error("cluaNewVar var type not found: " + Type)
		}
	}
	
	function table table:cluaGetVar(Name:string){ #[ Prototype [Not use very expensive, use stack alternative (identifier)] (DEBUG) ]#
		_debug(_assertClass(This, "can't get var from:", _CLUA_TYPE_CONTEXT))
		
		if(1){ #[ Find from local scopes ]#
			local Scopes = This["Scopes",table]
			local Count = Scopes:ncount()
			
			for(I=Count, 1, -1){
				local SVars = Scopes[I,table]["Vars",table]
				
				if(SVars:exists(Name)){
					return SVars[Name,table]
				}
			}
		}
		
		if(1){
			local Instance = This["Instance",table]
			local GVars = Instance["Vars",table]
			
			if(GVars:exists(Name)){
				return GVars[Name,table]
			}
			
			if(1){
				return Instance:cluaNewVar(_LUA_TYPE_NIL)
			}
		}
	}
	
	function table table:cluaMakeExtFunc(Name:string){
		_debug(_assertClass(This, "can't use to", _CLUA_TYPE_INSTANCE))
		
		local ExtFunc = This:cluaNewVar(_LUA_TYPE_FUNCTION)
		
		ExtFunc["Value",table] = table(
			"Code" = table(
				"_Type" = _CLUA_INST_BLOCK,
				1 = table(
					"_Type" = _CLUA_INST_EXT_CALL,
					1 = "clua_" + Name
				)
			),
			"Instance" = This,
			"Args" = table(), #[ always empty ]#
			"_class" = _CLUA_TYPE_FUNC_EXT
		)
		
		return ExtFunc
	}
	
	function table table:cluaBuildEnv(Vars:table){
		_debug(_assertClass(This, "can't use to", _CLUA_TYPE_INSTANCE))
		_assertClass(Vars, "accept only table variables", _CLUA_TYPE_VARIABLE)
		
		This["Vars",table] = This["Vars",table]:merge(Vars)
		
		return This
	}
	
	function table table:cluaBuildEnv(){
		_debug(_assertClass(This, "can't use to", _CLUA_TYPE_INSTANCE))
		
		local Table = This:cluaNewVar(_LUA_TYPE_TABLE)
		local Insert = This:cluaNewVar(_LUA_TYPE_STRING) _VarSetStr(Insert, "insert")
		
		_TblSet(Table, Insert, This:cluaMakeExtFunc("table_insert"))
		
		This["Vars",table] = table(
			"PrintTable" = This:cluaMakeExtFunc("printTable"),
			"print" = This:cluaMakeExtFunc("print"),
			"table" = Table,
			"inc" = This:cluaMakeExtFunc("inc")
		)
		
		return This
	}
	
	function table cluaInstance(){
		local Version = 5.1
		
		return table(
			"Vars" = table(),
			"Version" = Version,
			"_class" = _CLUA_TYPE_INSTANCE
		):cluaBuildEnv()
	}
	
	function table table:cluaToFunc(Code:table, Parm:table){
		_debug(_assertClass(This, "not compile to function (This):", _CLUA_TYPE_INSTANCE))
		_debug(_assertType(Code, "not compile to function (Code)", _CLUA_INST_BLOCK))
		
		return table(
			"Code" = Code,
			"Instance" = This,
			"Args" = Parm,            #n <number> - name <string>
			"_class" = _CLUA_TYPE_FUNC
		)
	}
	
	function table table:cluaToFunc(Code:table){
		return This:cluaToFunc(Code, table())
	}
	
	#[ function table table:cluaSCOPEpushLastScopeInScope(Scope:table){ ]#
		#[ _debug(_assertClass(This, "can't use to:", _CLUA_TYPE_SCOPES)) ]#
		#[ _debug(_assertNSubClass(This, "the function can only be used inside the scope context:", _CLUA_TYPE_SCOPES_IN_SCOPE)) ]#
		
		#[ local LScope = This[This:ncount(),table] ]#
		#[ LScope["Scopes",table]:pushTable(Scope) ]#
		
		#[ return This ]#
	#[ } ]#
	
	function table table:cluaSCOPEpush(Code:table, IndexReturn){
		_debug(_assertClass(This, "can't use to:", _CLUA_TYPE_SCOPES))
		_debug(_assert(Code["_Type",number], "Statment type is null"))
		
		This:pushTable(table(
			"Code" = Code,
			"Vars" = table(), #Локальные переменные
			"Scopes" = table( #Сюда попадают мертвые скопы, что бы брать значения, cluaSCOPEpushLastScopeInScope
				"_class" = _CLUA_TYPE_SCOPES,
				"_classsub" = _CLUA_TYPE_SCOPES_IN_SCOPE
			),
			"Contexts" = table(
				"_class" = _CLUA_TYPE_CONTEXTS,
				"_classsub" = _CLUA_TYPE_CONTEXTS_IN_SCOPE
			),
			"Return" = table(), #тут значения которые вернул скоп
			"Instruction" = 1,  #счетчик выполнения скопа
			"CurrVar" = table(),#переменная в которую записываем результаты
			"IndexReturn" = IndexReturn,  #На сколько идексов отмотать стек что бы записать скоп в scopes
			"_class" = _CLUA_TYPE_SCOPE
		))
		
		return This
	}
	
	function table table:cluaSCOPEpop(){ #Умертвляет последний скоп из хранилища скопов и возращает его
		_debug(_assertClass(This, "can't use to:", _CLUA_TYPE_SCOPES))
		_debug(_assert(This:ncount(), "Scopes count is 0"))
		
		return This:popTable()
	}
	
	function table table:cluaCreateFuncContext(){
		_debug(_assert(
			This["_class",number] == _CLUA_TYPE_FUNC |
			This["_class",number] == _CLUA_TYPE_FUNC_EXT,
			"can't create context"
		))
		
		local Ctx = table(
			"Scopes" = table(
				"_class" = _CLUA_TYPE_SCOPES
			):cluaSCOPEpush(This["Code",table], 1),
			"Instance" = This["Instance",table],
			"Func" = This,
			"IsComplete" = 0,
			"VarArg" = table(),
			"Return" = table(),
			"Contexts" = table(
				"_class" = _CLUA_TYPE_CONTEXTS
			),
			"DeadContext" = table(),
			"_class" = _CLUA_TYPE_CONTEXT
		)
		
		Ctx["Contexts",table]:pushTable(Ctx)
		
		return Ctx
	}
	
	function table table:cluaCTXPushReturn(Ret:table, Multipe){
		_debug(_assertClass(This, "can't use to:", _CLUA_TYPE_CONTEXTS))
		
		local CtxCount = This:ncount()                    _debug(_assert(CtxCount, "Ctxs count is 0"))
		local LCtx = This[CtxCount,table]                 _debug(_assertClass(LCtx, "LCtx", _CLUA_TYPE_CONTEXT))
		local Scopes = LCtx["Scopes",table]               _debug(_assertClass(Scopes, "Scopes", _CLUA_TYPE_SCOPES))
		
		local ScopesCount = Scopes:ncount()
		local LScope =  Scopes[ScopesCount,table]         _debug(_assertClass(LScope,  "LScope not scope", _CLUA_TYPE_SCOPE))
		
		if(Multipe){
			#[@debug]#
			foreach(K:number, T:table = Ret){
				_debug(_assertClass(T, "can't use to:", _CLUA_TYPE_VARIABLE))
			}
			
			LScope["Return",table] = Ret
		}else{
			_debug(_assertClass(Ret, "can't use to:", _CLUA_TYPE_VARIABLE))
			LScope["Return",table]:pushTable(Ret)
		}
		
		if(ScopesCount == 2){ #ScopesCount == 1 in Block (autoPop)
			LCtx["Return",table] = LScope["Return",table]
			Scopes:cluaSCOPEpop()
		}else{
			local LLScope = Scopes[ScopesCount - LScope["IndexReturn",number],table] _debug(_assertClass(LLScope, "LLScope not scope", _CLUA_TYPE_SCOPE))
			
			LLScope["Scopes",table]:pushTable(Scopes:cluaSCOPEpop())
		}
		
		return This
	}
	
	function table table:cluaCTXReturn(Rets:table){
		_debug(_assertClass(This, "can't use to:", _CLUA_TYPE_CONTEXTS))
		
		local CtxCount = This:ncount()                    _debug(_assert(CtxCount, "Ctxs count is 0"))
		local LCtx = This[CtxCount,table]                 _debug(_assertClass(LCtx, "LCtx", _CLUA_TYPE_CONTEXT))
		local Scopes = LCtx["Scopes",table]               _debug(_assertClass(Scopes, "Scopes", _CLUA_TYPE_SCOPES))
		
		Scopes:clear()
		
		#[@debug]#
		foreach(K:number, T:table = Rets){
			_debug(_assertClass(T, "can't use to:", _CLUA_TYPE_VARIABLE))
		}
		
		LCtx["Return",table] = Rets
		
		return This
	}
	
	#_CLUA_TYPE_CONTEXT - контекст выполнения функции
	#_CLUA_TYPE_CONTEXTS
	#_CLUA_TYPE_SCOPE - выполняет код, содержит локальные переменные, нужен что бы делить выполнение на шаги
	#_CLUA_TYPE_SCOPES - содержит в себе сколько скопов, всегда выполняется последний
	
#[
	@define _LSCOPES \
		local LScopes = LScope["Scopes",table] \
		local LScopesCount = LScopes:ncount()
	
	@define _LSCOPEGetReturn(SCOPEINDEX, INDEX) \
		LScopes[LScopesCount - SCOPEINDEX,table]["Return",table][INDEX,table]
	
	@define _LSCOPEGetReturns(SCOPEINDEX) \
		LScopes[LScopesCount - SCOPEINDEX,table]["Return",table]
	
	
	@define _VarNumOp(RESULT, LEFT, OP, RIGHT) \
		_VarSetNum(RESULT, __BINARY__(_VarNum(Left), OP, _VarNum(Right)))
	
	@define _VarBoolOp(RESULT, LEFT, OP, RIGHT) \
		_VarSetBool(RESULT, __BINARY__(_VarBool(Left), OP, _VarBool(Right)))
	
	@define _VarStrOp(RESULT, LEFT, OP, RIGHT) \
		_VarSetBool(RESULT, __BINARY__(_VarStr(Left), OP, _VarStr(Right)))
	
	@define _VarTblOp(RESULT, LEFT, OP, RIGHT) \
		_VarSetBool(RESULT, __BINARY__(_VarTbl(Left), OP, _VarTbl(Right)))
	
	
	@define _newVarFunc \
		Instance:cluaNewVar(_LUA_TYPE_FUNCTION)
		
	@define _newVarStr \
		Instance:cluaNewVar(_LUA_TYPE_STRING)
		
	@define _newVarTbl \
		Instance:cluaNewVar(_LUA_TYPE_TABLE)
	
	@define _newVarNum \
		Instance:cluaNewVar(_LUA_TYPE_NUMBER)
		
	@define _newVarBool \
		Instance:cluaNewVar(_LUA_TYPE_BOOLEAN)
		
	@define _newVarNil \
		Instance:cluaNewVar(_LUA_TYPE_NIL)
		
		
	@define _IsFunc(VAR) \
		_assertExpr(_VarType(VAR) == _LUA_TYPE_FUNCTION, _THROW_LUA_ERROR("Function expected"))
		
	@define _IsStr(VAR) \
		_assertExpr(_VarType(VAR) == _LUA_TYPE_STRING, _THROW_LUA_ERROR("String expected"))
		
	@define _IsTbl(VAR) \
		_assertExpr(_VarType(VAR) == _LUA_TYPE_TABLE, _THROW_LUA_ERROR("Table expected"))
		
	@define _IsNum(VAR) \
		_assertExpr(_VarType(VAR) == _LUA_TYPE_NUMBER, _THROW_LUA_ERROR("Number expected"))
		
	@define _IsBool(VAR) \
		_assertExpr(_VarType(VAR) == _LUA_TYPE_BOOLEAN, _THROW_LUA_ERROR("Boolean expected"))
		
	@define _IsNumOrBool(VAR) \
		_assertExpr(_VarType(VAR) == _LUA_TYPE_NUMBER | _VarType(VAR) == _LUA_TYPE_BOOLEAN, _THROW_LUA_ERROR("Number or Boolean expected"))
		
	@define _IsNil(VAR) \
		_assertExpr(_VarType(VAR) == _LUA_TYPE_NIL, _THROW_LUA_ERROR("Nil expected"))
		
		
	@define _VarCnd(VAR) \
		_VarType(VAR) == _LUA_TYPE_BOOLEAN ? _VarBool(VAR) : _VarType(VAR) != _LUA_TYPE_NIL
		
	
	@define _VarAss(TARGET, VALUE) \
		local TargetT = _VarType(VALUE) \
		_VarSetType(TARGET, TargetT) \
		switch(TargetT){ \
			case _LUA_TYPE_USERDATA, _VarSetTbl(TARGET, _VarTbl(VALUE)) break \
			case _LUA_TYPE_FUNCTION, _VarSetTbl(TARGET, _VarTbl(VALUE)) break \
			case _LUA_TYPE_BOOLEAN , _VarSetNum(TARGET, _VarNum(VALUE)) break \
			case _LUA_TYPE_STRING  , _VarSetStr(TARGET, _VarStr(VALUE)) break \
			case _LUA_TYPE_NUMBER  , _VarSetNum(TARGET, _VarNum(VALUE)) break \
			case _LUA_TYPE_THREAD  , _VarSetTbl(TARGET, _VarTbl(VALUE)) break \
			case _LUA_TYPE_TABLE   , _VarSetTbl(TARGET, _VarTbl(VALUE)) break \
			case _LUA_TYPE_NIL     , _VarSetNum(TARGET, 0)              break \
		}
	
	
	@define _THROW_LUA_ERROR(MSG) \
		#[ _notImp ]# error(MSG + ":" + __LINE__)
]#
	function number table:cluaContextExecute(Perf){
		_debug(_assertClass(This, "can't execute: ", _CLUA_TYPE_CONTEXT))
		
		if(This["IsComplete",number]){
			return 1
		}
		
		local Contexts = This["Contexts",table]           _debug(_assertClass(Contexts, "Contexts while true:", _CLUA_TYPE_CONTEXTS))
		local Instance = This["Instance",table]           _debug(_assertClass(Instance, "Instance while true:", _CLUA_TYPE_INSTANCE))
		local GVars = Instance["Vars",table]
		
		while(perf(Perf)){
			local ContextsCount = Contexts:ncount()
			local Context = Contexts[ContextsCount,table] _debug(_assertClass(Context, "Context while true:", _CLUA_TYPE_CONTEXT))
			local Scopes = Context["Scopes",table]        _debug(_assertClass(Scopes, "Scopes while true:", _CLUA_TYPE_SCOPES))
			local ScopesCount = Scopes:ncount()
			local LScope = Scopes[ScopesCount,table]      _debug(_assertClass(LScope, "LScope while true:", _CLUA_TYPE_SCOPE))
			local SVars = LScope["Vars",table]
			local Code = LScope["Code",table]
			
			local Type = Code["_Type",number]
			local I = LScope["Instruction",number]
			
			switch(Type){
				case _CLUA_INST_BLOCK,
					if(Code:ncount() + 1 == I){
						Scopes:cluaSCOPEpop()
						break
					}
					
					local Statment = Code[I,table]
					Scopes:cluaSCOPEpush(Statment, 1)
					break
					
				case _CLUA_INST_CTX, #[ Function in function ]#
					local Ctx = Code[1,table]
					
					if(I == 1){
						Contexts:pushTable(Ctx)
						break
					}
					
					local DeadContext = Context["DeadContext",table] _debug(_assertClass(DeadContext, "DeadContext:", _CLUA_TYPE_CONTEXT))
					
					Contexts:cluaCTXPushReturn(DeadContext["Return",table], 1)
					break
					
				case _CLUA_INST_EXT_CALL, #[ Call e2 function ]# #[ TODO: rewrite to generator ]#
					local VarArg = Context["VarArg",table]
					local E2Func = Code[1,string]
					
					local Rets = (E2Func)(Instance, VarArg)[table]
					Contexts:cluaCTXPushReturn(Rets, 1)
					break
					
				case _CLUA_INST_CALL, #TODO: обьявить все не понятные возвраты
					local ExptArgsCount = LScope["CurrVar",number]
					local Args = Code[2,table]
					local ArgsCount = Args:ncount() + 1
					local I = ArgsCount - I
					
					if(I >= 1){ #[ Get Args ]#
						local Statment = Args[ArgsCount - I,table]
						Scopes:cluaSCOPEpush(Statment, 1)
					}elseif(I == 0){ #[ Get Callee ]#
						local Statment = Code[I + 1,table]
						Scopes:cluaSCOPEpush(Statment, 1)
					}elseif(I == -1){ #[ Callee ]#
						local LScopes = LScope["Scopes",table]
						local LScopesCount = LScopes:ncount()
						local Callee = LScopes[LScopesCount,table]["Return",table][1,table]
						local CalleeType = Callee["Type",number]
						
						LScope["CurrVar",number] = Callee["Value",table]["Args",table]:ncount()
						
						if(CalleeType == _LUA_TYPE_FUNCTION){
							LScopes[LScopesCount,table] = Callee
							Callee["NewCtx",table] = Callee["Value",table]:cluaCreateFuncContext()
						}elseif(CalleeType == _LUA_TYPE_TABLE){
							error("Not implement (check __call metamethod)") #TODO: 
						}else{
							error("attempt to call a " + CalleeType + " value")
						}
					}elseif((I + 1) >= (ExptArgsCount) * -1){ #[ Args ]#
						local LScopes = LScope["Scopes",table]
						local Callee = LScopes[LScopes:ncount(),table]
						
						local Index = (I + 1) * -1
						local Args = Callee["Value",table]["Args",table]
						local Ctx = Callee["NewCtx",table]
						local Vars = Ctx["Scopes",table][1,table]["Vars",table]
						local Arg = LScopes[Index,table]["Return",table][1,table]
						
						if(Args:exists(Index)){
							Vars[Args[Index,string],table] = Arg
						}else{
							Ctx["VarArg",table]:pushTable(Arg)
						}
					}elseif((I + 1) >= (ArgsCount - 1) * -1){ #[ VarArg ]#
						local LScopes = LScope["Scopes",table]
						local Callee = LScopes[LScopes:ncount(),table]
						
						local Index = (I + 1) * -1
						local Args = Callee["Value",table]["Args",table]
						local Ctx = Callee["NewCtx",table]
						local Vars = Ctx["Scopes",table][1,table]["Vars",table]
						local Arg = LScopes[Index,table]["Return",table]
						local VarArg = Ctx["VarArg",table]
						local ArgCount = Arg:ncount()
						
						for(I=1, ArgCount){ #[ TODO: optimaze (recurent) this for, (return 1,2,...) consumes more ops ]#
							if(Args:exists(Index + I - 1)){
								Vars[Args[Index + I - 1,string],table] = Arg[I,table]
							}
							
							VarArg:pushTable(Arg[I,table])
						}
					}else{
						local LScopes = LScope["Scopes",table]
						local Callee = LScopes[LScopes:ncount(),table]
						local CalleeType = Callee["Type",number]
						
						if(CalleeType == _LUA_TYPE_FUNCTION){
							Scopes:cluaSCOPEpop()
							Scopes:cluaSCOPEpush(
								table(
									"_Type" = _CLUA_INST_CTX,
									1 = Callee["NewCtx",table]
								), 1
							)
						}elseif(CalleeType == _LUA_TYPE_TABLE){
							error("Not implement (check __call metamethod)") #TODO: 
						}else{
							print(format("%p", LScopes))
							error("attempt to call a " + CalleeType + " value")
						}
					}
					break
					
				case _CLUA_INST_LITERAL,
					local VarType = Code[1,number]
					local Variable = Instance:cluaNewVar(VarType)
					
					switch(VarType){
						case _LUA_TYPE_NUMBER,
						case _LUA_TYPE_BOOLEAN,
							Variable["Value",number] = Code[2,number]
							break
						
						case _LUA_TYPE_STRING,
							Variable["Value",string] = Code[2,string]
							break
							
						case _LUA_TYPE_NIL, break
						default, error("VarType Type is not defined: " + VarType)
					}
					
					Contexts:cluaCTXPushReturn(Variable, 0)
					break
					
				case _CLUA_INST_IDENTIFIER, #TODO: see all contexts
					local I = ScopesCount - I
					local Name = Code[1,string]
					local Variable = table()
					
					if(I != 0){
						local SVars = Scopes[I,table]["Vars",table]
						
						if(SVars:exists(Name)){
							Variable = SVars[Name,table]
						}
					}else{
						if(GVars:exists(Name)){
							Variable = GVars[Name,table]
						}else{
							I = -1
						}
					}
					
					if(I != -1){
						if(_IsVar(Variable)){
							Contexts:cluaCTXPushReturn(Variable, 0)
						}
					}else{
						GVars[Name,table] = _newVarNil
						Contexts:cluaCTXPushReturn(
							GVars[Name,table], 0
						)
					}
					break
					
				case _CLUA_INST_BINARY,
					local Operator = Code[1,number]
					local AndOrOr = Operator == _CLUA_BINARY_AND | Operator == _CLUA_BINARY_OR
					
					if(I == 1 & AndOrOr){
						local OP1 = Code[2,table]
						
						Scopes:cluaSCOPEpush(OP1, 1)
					}elseif(I == 2 & AndOrOr){
						              _LSCOPES
						local Left  = _LSCOPEGetReturn(0, 1)
						local OP2 = Code[3,table]
						local Cnd = _VarCnd(Left)
						
						if((Cnd & Operator == _CLUA_BINARY_OR) | (!Cnd & Operator == _CLUA_BINARY_AND)){
							Contexts:cluaCTXPushReturn(Left, 0)
						}else{
							Scopes:cluaSCOPEpush(OP2, 1)
						}
					}elseif(I == 1){
						local Left = Code[2,table]
						local Right = Code[3,table]
						
						Scopes:cluaSCOPEpush(Right, 1)
						Scopes:cluaSCOPEpush(Left,  2)
					}else{            _LSCOPES
						local Left  = _LSCOPEGetReturn(1, 1)
						local Right = _LSCOPEGetReturn(0, 1)
						local Ret = _newVarNil
						
						_assertVar(Right)
						_assertVar(Left)
						
						if(0){ #TODO: find meta methods, первый левый, если нету, правый, иначе ошибка
							
						}else{ #default methods
							#[ _assertExpr(_VarType(Left) == _VarType(Right), _THROW_LUA_ERROR("attempt to compare {Type_ARG1} with {Type_ARG2}")) ]#
							
						#[
							@define _BINARY_EQ_GEN(LEFT, OP, RIGHT)                                 \
								local TypeL = _VarType(LEFT)                                        \
								local TypeR = _VarType(RIGHT)                                       \
								Ret = _newVarBool                                                   \
								if(TypeL != TypeR){ _VarSetBool(Ret, 0) break }                     \
								switch(TypeL){                                                      \
									case _LUA_TYPE_NUMBER  , _VarNumOp(Ret, LEFT, OP, RIGHT)  break \
									case _LUA_TYPE_BOOLEAN , _VarBoolOp(Ret, LEFT, OP, RIGHT) break \
									case _LUA_TYPE_STRING  , _VarStrOp(Ret, LEFT, OP, RIGHT)  break \
									case _LUA_TYPE_USERDATA,                                        \
									case _LUA_TYPE_FUNCTION,                                        \
									case _LUA_TYPE_THREAD  ,                                        \
									case _LUA_TYPE_TABLE   , _VarTblOp(Ret, LEFT, OP, RIGHT) break  \
									case _LUA_TYPE_NIL     , _VarSetBool(Ret, 0)             break  \
								}
						]#
							
							switch(Operator){
								case _CLUA_BINARY_ADD, _IsNum(Left) _IsNum(Right) Ret = _newVarNum _VarNumOp(Ret, Left, "+", Right) break
								case _CLUA_BINARY_SUB, _IsNum(Left) _IsNum(Right) Ret = _newVarNum _VarNumOp(Ret, Left, "-", Right) break
								case _CLUA_BINARY_MUL, _IsNum(Left) _IsNum(Right) Ret = _newVarNum _VarNumOp(Ret, Left, "*", Right) break
								case _CLUA_BINARY_DIV, _IsNum(Left) _IsNum(Right) Ret = _newVarNum _VarNumOp(Ret, Left, "/", Right) break
								case _CLUA_BINARY_MOD, _IsNum(Left) _IsNum(Right) Ret = _newVarNum _VarNumOp(Ret, Left, "%", Right) break
								case _CLUA_BINARY_CNC, _IsStr(Left) _IsStr(Right) Ret = _newVarStr _VarSetStr(Ret, _VarStr(Left) + _VarStr(Right)) break
									#TODO: check meta method __tostring
								
								case _CLUA_BINARY_LS,   _IsNum(Left) _IsNum(Right) Ret = _newVarBool _VarNumOp(Ret, Left, "<" , Right) break
								case _CLUA_BINARY_GR,   _IsNum(Left) _IsNum(Right) Ret = _newVarBool _VarNumOp(Ret, Left, ">" , Right) break
								case _CLUA_BINARY_EQLS, _IsNum(Left) _IsNum(Right) Ret = _newVarBool _VarNumOp(Ret, Left, "<=", Right) break
								case _CLUA_BINARY_EQGR, _IsNum(Left) _IsNum(Right) Ret = _newVarBool _VarNumOp(Ret, Left, ">=", Right) break
								case _CLUA_BINARY_EQ,   _BINARY_EQ_GEN(Left, "==", Right) break
								case _CLUA_BINARY_NEQ,  _BINARY_EQ_GEN(Left, "!=", Right) break
								case _CLUA_BINARY_AND,  Ret = Right break
								case _CLUA_BINARY_OR,   Ret = Right break
								
								default, _notImp() break
							}
						}
						
						Contexts:cluaCTXPushReturn(Ret, 0)
					}
					break
					
				case _CLUA_INST_UNARY,
					if(I == 1){
						local Expr = Code[2,table]
						
						Scopes:cluaSCOPEpush(Expr, 1)
					}else{            _LSCOPES
						local Expr  = _LSCOPEGetReturn(0, 1)
						local Operator = Code[1,number]
						local Ret = _newVarNil
						
						_assertVar(Expr)
						
						if(0){ #TODO: find meta methods
							
						}else{ #default methods
							switch(Operator){
								case _CLUA_UNARY_NEG,  Ret = _newVarNum _VarSetNum(Ret, -_VarNum(Expr)) break
								case _CLUA_UNARY_NOT,  _VarSetBool(Ret, !_VarCnd(Expr))
									#[ switch(_VarType(Expr)){ ]#
										#[ case _LUA_TYPE_NIL,     Ret = _newVarBool _VarSetBool(Ret, 1)               break ]#
										#[ case _LUA_TYPE_BOOLEAN, Ret = _newVarBool _VarSetBool(Ret, !_VarBool(Expr)) break ]#
										#[ default,                Ret = _newVarBool _VarSetBool(Ret, 0)               break ]#
									#[ } ]#
									break
								case _CLUA_UNARY_SHP,
									switch(_VarType(Expr)){
										case _LUA_TYPE_STRING, Ret = _newVarNum  _VarSetNum(Ret, _VarStr(Expr):length()) break
										case _LUA_TYPE_TABLE,  Ret = _newVarNum  _VarSetNum(Ret, _VarTbl(Expr):ncount()) break
										default, _THROW_LUA_ERROR("operator '#' not apply to" + _VarType(Expr))          break
									}
									break
								
								default, _notImp() break
							}
						}
						
						Contexts:cluaCTXPushReturn(Ret, 0)
					}
					break
					
				case _CLUA_INST_TABLE,
					local CurrVar = LScope["CurrVar",table]
					local Code = Code[1,table]
					
					if(I == 1){
						LScope["CurrVar",table] = _newVarTbl
					}elseif(I == Code:count() * 2 + 2){
						Contexts:cluaCTXPushReturn(CurrVar, 0)
					}elseif(!(I % 2)){
						local Field = Code[I / 2,table]
						
						Scopes:cluaSCOPEpush(Field[2,table], 1) #value
						
						if(!Field[3,number]){
							Scopes:cluaSCOPEpush(Field[1,table], 2) #key
						}
					}else{             _LSCOPES
						local Value  = _LSCOPEGetReturn(0, 1)
						local Key    = _LSCOPEGetReturn(1, 1)
						local GenKey = Code[(I-1) / 2,table][3,number]
						
						if(GenKey){
							local Key = CurrVar["_GenKey",number] + 1
							
							CurrVar[Key,table] = Value
							CurrVar["_GenKey",number] = Key
						}else{
							_TblSet(CurrVar, Key, Value)
						}
					}
					break
					
				case _CLUA_INST_LOOKUP,
					if(I == 1){
						local Object = Code[1,table]
						local Member = Code[2,table]
						
						Scopes:cluaSCOPEpush(Object, 1)
						Scopes:cluaSCOPEpush(Member, 2)
					}else{              _LSCOPES
						local Object  = _LSCOPEGetReturn(0, 1)
						local Member  = _LSCOPEGetReturn(1, 1)
						local Ret = table()
						
						_TblGet(Ret, Object, Member)
						
						if(_VarType(Ret) == _LUA_TYPE_NIL){
							Ret = _newVarNil
						}
						
						Contexts:cluaCTXPushReturn(Ret, 0)
					}
					break
					
				case _CLUA_INST_ASSIGNMENT,
					local CurrVar = LScope["CurrVar",table]
					local Code = Code[1,table]
					
					if(I == Code:count() * 2 + 1){
						Scopes:cluaSCOPEpop()
					}elseif(I % 2){
						local Code = Code[(I+1) / 2,table]
						local Target = Code[1,table]
						local Value = Code[2,table]
						
						Scopes:cluaSCOPEpush(Target, 1)
						Scopes:cluaSCOPEpush(Value,  2)
					}else{              _LSCOPES
						local Target  = _LSCOPEGetReturn(0, 1)
						local Value   = _LSCOPEGetReturn(1, 1)
						
						_VarAss(Target, Value)
					}
					break
					
				case _CLUA_INST_RETURN,
					local CurrVar = LScope["CurrVar",table]
					local Code = Code[1,table]
					local Expr = Code[I,table]
					
					if(I != 1){         _LSCOPES
						local Value   = _LSCOPEGetReturn(0, 1)
						
						CurrVar:pushTable(Value)
					}
					
					if(Code:count() + 1 == I){
						Contexts:cluaCTXReturn(CurrVar)
					}else{
						Scopes:cluaSCOPEpush(Expr, 1)
					}
					break
					
				case _CLUA_INST_FUNCTION,
					local ParmIndf  = Code[1,table]
					local Block = Code[2,table]
					local ArgCount = ParmIndf:ncount()
					local Parm = table()
					
					local Ret = _newVarFunc
					
					for(I=1, ArgCount){
						if(ParmIndf["_Type",number] != _CLUA_INST_VARARG){
							Parm:pushString(ParmIndf[I,table][1,string])
						}
					}
					
					_VarSetTbl(Ret, Instance:cluaToFunc(Block, Parm))
					
					Contexts:cluaCTXPushReturn(Ret, 0)
					break
					
				case _CLUA_INST_IF,
					local Condition = Code[1,table]
					local TrueBody  = Code[2,table]
					local FalseBody = Code[3,table]
					
					if(I == 1){
						Scopes:cluaSCOPEpush(Condition, 1)
					}else{            _LSCOPES
						local Value = _LSCOPEGetReturn(0, 1)
						local Cnd   = _VarCnd(Value)
						
						Scopes:cluaSCOPEpop()
						
						if(Cnd){
							Scopes:cluaSCOPEpush(TrueBody, 0)
						}else{
							Scopes:cluaSCOPEpush(FalseBody, 0)
						}
					}
					break
					
				case _CLUA_INST_BREAK,
					while(1){
						local PopType = Scopes:cluaSCOPEpop()["Code",table]["_Type",number]
						
						if(	  PopType == _CLUA_INST_WHILE
							| PopType == _CLUA_INST_FOR
							| PopType == _CLUA_INST_REPEAT){
							break
						}
					}
					break
					
				case _CLUA_INST_WHILE,
					local Condition  = Code[1,table]
					local Body = Code[2,table]
					
					if(I == 1){
						Scopes:cluaSCOPEpush(Condition, 1)
					}else{            _LSCOPES
						local Value = _LSCOPEGetReturn(0, 1)
						local Cnd   = _VarCnd(Value)
						
						if(Cnd){
							Scopes:cluaSCOPEpush(Body, 0)
							I = 0
						}else{
							Scopes:cluaSCOPEpop()
						}
					}
					break
					
				default,
					error("cluaContextExecute undefined type: " + Type + " " + __LINE__)
					break
			}
			
			if(!Scopes:ncount()){
				Contexts[ContextsCount - 1,table]["DeadContext",table] = Contexts:popTable()
				
				if(!Contexts:ncount()){
					Context["IsComplete",number] = 1
					return 1
				}
			}
			
			LScope["Instruction",number] = I + 1
		}
		
		return 0
	}
	
	function table table:cluaFuncExecute(){
		return This:cluaCreateFuncContext()
	}
	
	##@inline
	#@ipref lua/
	#include "clua_env"
}

#[ block	1 ]#
#[ call	2 ]#
#[ identifier	3 ]#
#[ call	4 ]#